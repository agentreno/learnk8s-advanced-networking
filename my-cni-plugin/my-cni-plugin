#!/usr/bin/env python3

import os
import json
import sys
import subprocess
import random


VERSION = {
    "cniVersion":"0.3.1",
    "supportedVersions": ["0.1.0","0.2.0","0.3.0","0.3.1"]
}
IPAM_BINARY = "/opt/cni/bin/host-local"

bridge_setup_commands = [
    "ip link add cni0 type bridge",
    "ip link set cni0 up",
    "ip address add {bridge_ip}/{subnet_mask} dev cni0",
    "iptables -A FORWARD -s {pod_network} -j ACCEPT",
    "iptables -A FORWARD -d {pod_network} -j ACCEPT",
    "iptables -t nat -N MY_CNI_MASQUERADE",
    "iptables -t nat -A MY_CNI_MASQUERADE -d {pod_network} -j RETURN",
    "iptables -t nat -A MY_CNI_MASQUERADE -d {host_network} -j RETURN",
    "iptables -t nat -A MY_CNI_MASQUERADE -j MASQUERADE",
    "iptables -t nat -A POSTROUTING -s {pod_node_subnet} -j MY_CNI_MASQUERADE",
]

pod_connection_commands = [
    "mkdir -p /var/run/netns/",
    "ln -sf {cni_netns} /var/run/netns/{cni_container_id}",
    "ip link add {cni_ifname} type veth peer name {host_ifname}",
    "ip link set {host_ifname} up master cni0",
    "ip link set {cni_ifname} up netns {cni_container_id}",
    "ip netns exec {cni_container_id} ip address add {pod_ip} dev {cni_ifname}",
    "ip netns exec {cni_container_id} ip route add default via {bridge_ip} dev {cni_ifname}",
]


def read_inputs():
    """
    Read a variety of inputs from stdin and env vars
    Returns tuple:
    (netconf, host_network, pod_network, pod_node_subnet)
    """
    netconf = json.loads(sys.stdin.read())
    return (
        netconf,
        netconf["myHostNet"],
        netconf["myPodNet"],
        netconf["myPodNodeSubnet"],
    )

def add():
    # Read inputs
    (netconf, host_network, pod_network, pod_node_subnet) = read_inputs()

    # Invoke the host-local IPAM binary
    ipam_input = netconf
    ipam_input["ipam"] = {"subnet": pod_node_subnet}
    ipam_proc = subprocess.run(
        [IPAM_BINARY],
        input=json.dumps(ipam_input).encode("utf-8"),
        stdout=subprocess.PIPE
    )
    ipam_response = json.loads(ipam_proc.stdout.decode("utf-8"))
    pod_ip = ipam_response["ips"][0]["address"]
    bridge_ip = ipam_response["ips"][0]["gateway"]

    # Use a directory to signal for a one-time setup which installs
    # a bridge network
    mkdir_proc = subprocess.run(["mkdir", "/var/my-cni-plugin-setup-done"])
    if mkdir_proc.returncode == 0:
        args = {
            "bridge_ip": bridge_ip,
            "pod_network": pod_network,
            "host_network": host_network,
            "pod_node_subnet": pod_node_subnet,
            "subnet_mask": pod_node_subnet.split("/")[1]
        }
        for command in bridge_setup_commands:
            subprocess.run(command.format(**args).split())

    # Add the new pod to the bridge
    args = {
        "cni_netns": os.environ["CNI_NETNS"],
        "cni_container_id": os.environ["CNI_CONTAINERID"],
        "cni_ifname": os.environ["CNI_IFNAME"],
        "host_ifname": "veth{}".format(random.randrange(32767)),
        "pod_ip": pod_ip,
        "bridge_ip": bridge_ip
    }
    for command in pod_connection_commands:
        subprocess.run(command.format(**args).split())

    # Return CNI response
    response = ipam_response
    response["interfaces"] = [
        {"name": os.environ["CNI_IFNAME"], "sandbox": os.environ["CNI_NETNS"]}
    ]
    response["ips"][0]["interface"] = 0
    print(json.dumps(response))

def delete():
    # Read inputs
    (netconf, host_network, pod_network, pod_node_subnet) = read_inputs()

    # Tell IPAM to free addresses
    ipam_input = netconf
    ipam_input["ipam"] = {"subnet": pod_node_subnet}
    ipam_proc = subprocess.run(
        [IPAM_BINARY],
        input=json.dumps(ipam_input).encode("utf-8"),
    )

    # Remove the link for the pod's network namespace
    # Resources (veths etc.) will be cleaned automatically when kubelet removes
    subprocess.run(
        "rm -f /var/run/netns/{}".format(os.environ["CNI_CONTAINERID"]).split()
    )

def version():
    print(json.dumps(VERSION))


if __name__ == "__main__":
    cni_command = os.environ["CNI_COMMAND"]
    if cni_command == "ADD":
        add()
    elif cni_command == "DEL":
        delete()
    elif cni_command == "VERSION":
        version()
